---
const { pathname } = Astro.url
const disableClickOnRoutes = ['/']
const shouldDoClick = !disableClickOnRoutes.includes(pathname)
---

<header id="header" class="relative z-10" tabindex="0">
  <div class="relative mx-auto flex h-24 max-w-[1200px] items-center justify-center gap-20 px-4">
    <!-- Logo -->
    <a
      href="/"
      class={`${!shouldDoClick ? 'pointer-events-none' : ''} relative z-20 flex items-center gap-2`}
      aria-label="Link to Home Hirace"
    >
      <img src="/favicon.svg" alt="Imagen del logo" class="w-8" aria-label="Hirace logo" />
      <span class="text-xl font-medium lg:text-2xl">Hirace</span>
    </a>

    <div class="border-theme-light-grey absolute inset-0 z-10 border-b bg-white lg:hidden"></div>

    <!-- Navegación principal (modo móvil oculta, visible en desktop) -->
    <nav
      id="navMain"
      aria-label="Main navigation"
      class="absolute left-0 top-[calc(100%+2px)] w-full origin-top -translate-y-[100%] bg-white font-semibold opacity-0 lg:visible lg:static lg:w-auto lg:translate-y-0 lg:opacity-100 lg:shadow-none"
    >
      <ul
        class="[&_a]:hover:text-theme-primary flex flex-col items-center gap-4 p-6 font-normal lg:flex-row lg:gap-6 lg:p-0 [&_a]:px-3 [&_a]:py-1 [&_a]:font-medium [&_a]:transition-all"
      >
        <a href="#feature">Features</a>
        <a href="#howWork">How it Works</a>
        <a href="#vacancy">Jobs Vacancy</a>
        <a href="#">Pricing</a>
      </ul>
    </nav>

    <!-- Botón de registro -->
    <button
      type="button"
      class="bg-theme-primary group ml-auto hidden h-12 cursor-pointer items-center justify-center gap-1 rounded-xl px-4 py-2 text-sm text-white lg:flex"
    >
      <span>Sign Up</span>
      <svg
        class="transition-transform duration-300 ease-in group-hover:translate-x-1"
        width="16"
        height="16"
        viewBox="0 0 24 24"
        fill="none"
        aria-hidden="true"
      >
        <path
          d="M9 5L16 12L9 19"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"></path>
      </svg>
    </button>

    <!-- menú hamburguesa -->
    <button
      id="menuBtn"
      class="group relative z-20 ml-auto cursor-pointer lg:hidden"
      aria-label="Open navigation menu"
      aria-controls="main-menu"
      aria-expanded="false"
    >
      <svg width="32" height="32" viewBox="0 0 32 32" fill="none" aria-hidden="true">
        <path
          d="M4 22.6667H28"
          stroke="#635BFF"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"></path>
        <path
          d="M4 16H28"
          stroke="#635BFF"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"></path>
        <path
          d="M4 9.33333H28"
          stroke="#635BFF"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"></path>
      </svg>
    </button>
  </div>
</header>

<style>
  #navMain {
    transition:
      opacity 200ms 200ms,
      translate 500ms cubic-bezier(0.87, -0.5, 0.03, 1.54),
      visibility 0s 500ms,
      box-shadow 100ms;
  }

  #navMain.open {
    visibility: visible;
    box-shadow: 0 16px 16px rgba(0, 0, 0, 0.05);
    opacity: 1;
    translate: 0 0;
    border-radius: 0;
    transition:
      opacity 0ms,
      translate 500ms cubic-bezier(0.87, -0.5, 0.03, 1.54),
      visibility 0s 0s,
      box-shadow 100ms 510ms;
  }
</style>

<script>
  import { $ } from '@/lib/dom-selector'

  const menuBtn = $('#menuBtn') as HTMLButtonElement
  const nav = $('#navMain') as HTMLElement
  const header = $('#header') as HTMLElement
  const body = document.body

  menuBtn?.addEventListener('click', () => {
    const isOpen = nav.classList.toggle('open')
    menuBtn.setAttribute('aria-expanded', isOpen ? 'true' : 'false')
  })

  // Optional but recommended for good UX
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      const isOpen = nav?.classList.contains('open')
      if (isOpen) {
        nav.classList.remove('open')
        menuBtn.setAttribute('aria-expanded', 'false')
        body.classList.remove('overflow-hidden')
      }
    }
  })

  document.addEventListener('click', (e) => {
    const target = e.target as HTMLElement
    const isClickInsideMenu = header.contains(target)
    const isClickOnBtn = menuBtn.contains(target)
    const isClickOnLink = nav.contains(target) && target.closest('a')


    if ((!isClickInsideMenu && !isClickOnBtn && nav?.classList.contains('open')) || isClickOnLink) {
      nav.classList.remove('open')
      menuBtn.setAttribute('aria-expanded', 'false')
      body.classList.remove('overflow-hidden')
    }
  })

  // prevent scroll while menu is open (scroll lock)
  menuBtn?.addEventListener('click', () => {
    const isOpen = nav.classList.contains('open')
    body.classList.toggle('overflow-hidden', isOpen)
  })
</script>
